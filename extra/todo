	Things we need
	-MONEY ;)
	- global variable == error value for $? 


CMDS CODE
	-ECHO							Kostas
		- "-n"
	-CD								Hendrik
	-PWD							Hendrik
	-EXPORT							Hamster
	-UNSET							Hamster
	-ENV							Hamster
	-EXIT							Hamster
	-$?								Hamster
	-CTRL							Hendrik
		-C	(newline)				
		-D
		-\
	

LAUNCH SHELL						ALL
	- Only one Argument
	- launch SHELL

READ INPUT												Vincent
	-Error handling										Hamster
		- '\''
		- ';'
		- dont ?interpret? unlcosed quotes ?(%2 == 0)?
		- other unspecified special chars
	-Get prompt for readline (location)					Hendrik(pwd)
	-

ANALYZE INPUT											Vincent
	-Working History									Hendrik
	-Number of args/cmds								Vincent
		-find all paths									Vincent/Kostas
		-find correct launch path for each arg/cmd		Vincent/Kostas
	

EXECUTE INPUT										Kostas


END SHELL
	- freeing									Hamster
	- exit										Hamster/ALL

CMD SEPERATORS									Kostas
	- |
	- <
	- >
	- >>
	- <<

/*
**fd == contains input and output fd; append_flag == if it needs to be appended;
**path_cmd == exe path and cmd; cmd_arg == argumants for the cmd;
*/

typedef struct s_seq
{
	int		fd[2];
	int		append_flag;
	int		create_flag;
	int		here_doc_flag;
	int		input_red_flag;
	t_cmd	cmd;
}	t_seq;

typedef struct s_cmd
{
	char	*path_cmd;
	char	**cmd_args;
}				t_cmd;
